/* empty css                     */import{d as c,v as e,x as s,y as t,l as p,M as n}from"./index.js";const i={class:"markdown-body"},l=t('<h1>时间轴语法简易帮助</h1><h2>来源</h2><p>本文档节取并修改自<a href="https://github.com/quisquous/cactbot/blob/main/docs/zh-CN/TimelineGuide.md">Cactbot时间轴指南</a>。</p><h3>注释</h3><p>时间轴中的 <code class="">#</code> 符号用于定义注释，其后的所有内容均会被忽略。</p><h3>条目</h3><p>以下是一些时间轴条目的语法示例。每一行的条目均以事件时间和事件名称开始。</p><p><code class="">数字 &quot;字符串&quot; (duration 数字)</code></p><p><code class="">数字 &quot;字符串&quot; sync /正则/ (window 数字,数字) (jump 数字)</code></p><p>此处的括号表示这个部分是可选的，括号本身并不是语法的组成部分。</p><p>数字可以是整数，如 <code class="">34</code>；也可以是浮点数，如 <code class="">84.381</code>；也可以是MM:SS格式，如 <code class="">05:20</code>；</p><p>字符串一般为事件名，如 <code class="">&quot;坠落&quot;</code> 或 <code class="">&quot;双重攻击&quot;</code>。</p><p>正则是一个标准的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">Javascript 正则表达式</a>。</p><p>事件时间与事件名称永远在最开始的位置，但 <code class="">window</code>、<code class="">jump</code>、以及 <code class="">sync</code> 并没有明确的顺序规定。但是在代码规范里，sync通常放在前面。</p><p><code class="">window 数字,数字</code> 规定了同步的时间范围。若 <code class="">window</code> 未设置，timeline默认将其视同为设置了 <code class="">window 2.5,2.5</code>。也就是，相对于当前事件时间的前2.5秒至后2.5秒之间。例如，对于此时间轴条目：<code class="">3118.9 &quot;Lancing Bolt&quot; sync /:Raiden:3876:/</code>， 当正则表达式 <code class="">/:Raiden:3876:/</code> 在 3116.4 到 3121.4 之间的任意时间点被匹配到时，时间轴会同步并回溯至 3118.9。时间轴通常在独特的技能上使用较大的window值，以确保时间轴即使在战斗中才启动也可以正确地同步到正确的位置。</p><p><code class="">jump 数字</code> 告诉时间轴在匹配sync成功时跳转至指定的时间点。</p>',16),r=[l],u=c({__name:"README",setup(d,{expose:o}){return o({frontmatter:{},excerpt:void 0}),(a,h)=>(e(),s("div",i,r))}}),_={class:"markdown-body"},q=c({__name:"help",setup(d){return(o,a)=>(e(),s("article",_,[p(n(u))]))}});export{q as default};
